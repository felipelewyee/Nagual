#!/bin/bash
# This file is part of Nagual software.
#
#    Nagual is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    Nagual is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Nagual.  If not, see <http://www.gnu.org/licenses/>.
#
# Cite as follows:
# 
# R. Flores-Moreno, H. N. Gonzalez-Ramirez, J. F. H. Lew-Yee, J. M. del Campo,
# J. J. Villalobos-Castro, J. A. Flores-Ramos, J. A. Guerrero-Cruz,
# B. Zuniga-Gutierrez, Nagual 1, Guadalajara Jal., Mexico (2020)
#
####################################################
#   Nagual: Multicomponent many body calculations.
#   Copyright (C) 2006-2020 Nagual developers.
#
#   Contact: r.flores@academicos.udg.mx
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
program=Nagual
version=1
basename=${1%.inp}
outfile=$basename
srcnode=$HOSTNAME
srcdir=$(pwd)
pname=$program.$basename.$$
#
# Check PBS capability
#
pbs=false
if [[ $2 == "q" ]]
then
  man pbs >/dev/null 2>&1 && pbs=true
  $pbs && which qstat >/dev/null 2>&1 || pbs=false
  $pbs && which qsub >/dev/null 2>&1 || pbs=false
fi
if [[ $pbs == true ]]
then
  echo "Using PBS"
  queues=$(qstat -Q | grep "yes" | cut -d" "  -f1)
  echo "Which queue would you like to use?"
  typeset -i n=0
  for queue in $queues
  do 
    let 'n = n + 1'
    echo -e "\t($n) $queue"
  done
  echo -e "Select: \c"
  read ans
  queue=$(echo $queues | cut -d" " -f$ans)
  workdir=/SCRATCH/$pname
else
  echo "Running interactive"
  workdir=$HOME/$pname
fi
#
jobnagual=jobfile.$pname
#
# Using queue system
if [[ $pbs == true ]]
then
cat >$jobnagual <<-***
	#!/bin/bash
	
	#PBS -l nodes=1:ppn=1
	#PBS -l walltime=10000:00:00
	#PBS -N $pname
	#PBS -j oe

	mkdir $workdir
	cd $workdir
	scp $srcnode:$srcdir/$1 ./$program.inp
	for file in $srcnode:$srcdir/$basename.bas.*
	do
	  if [[ -s \$file ]] 
	  then
	    scp \$file ./$program.bas.\${file##*.}
	  fi
	done
	
	function pickup
	{
	  if [[ -s $program.out ]] 
	  then
	    rcp $program.out $srcnode:$srcdir/$outfile.out
	  fi
	  for file in $program.scf $program.log 
	  do
	    if [[ -s \$file ]] 
	    then
	      rcp \$file $srcnode:$srcdir/$outfile.\${file##*.}
	    fi
	  done
	  for file in $program.bas.1 $program.bas.2 $program.bas.3
	  do
	    if [[ -s \$file ]] 
	    then
	      rcp \$file $srcnode:$srcdir/$outfile.bas.\${file##*.}
	    fi
	  done
	}
	trap 'pickup; exit' 1 2 3 15
        $program.$version.exe 
	pickup
        cd 
        rm -rf $workdir
	***
      chmod 700 $jobnagual
      qsub $jobnagual >/dev/null && rm $jobnagual
else   # interactive mode
cat >$jobnagual <<-***
	#!/bin/bash

	mkdir $workdir
	cp $1 $workdir/$program.inp
	for file in $basename.bas.*
	do
	  if [[ -s \$file ]] 
	  then
	    cp \$file $workdir/$program.bas.\${file##*.}
	  fi
	done
	cd $workdir
	
	function pickup
	{
	  if [[ -s $program.out ]] 
	  then
	    cat $program.out > $srcdir/$outfile.out
	  fi
	  if [[ -s $HOME/nohup.out ]] 
	  then
	    cat $HOME/nohup.out >>$srcdir/$outfile.out
            rm -f $HOME/nohup.out
	  fi
	  for file in $program.scf $program.log 
	  do
	    if [[ -s \$file ]] 
	    then
	      cp \$file $srcdir/$outfile.\${file##*.}
	    fi
	  done
	  for file in $program.bas.1 $program.bas.2 $program.bas.3
	  do
	    if [[ -s \$file ]] 
	    then
	      cp \$file $srcdir/$outfile.bas.\${file##*.}
	    fi
	  done
	}
	trap 'pickup; exit' 1 2 3 15
	cd $workdir
        $program.$version.exe 
	pickup
        cd 
        rm -rf $workdir
	***
  chmod 700 $jobnagual
  nohup ./$jobnagual && rm $jobnagual  &
fi
